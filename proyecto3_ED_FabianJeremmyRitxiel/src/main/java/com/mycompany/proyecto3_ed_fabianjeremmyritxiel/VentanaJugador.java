/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyecto3_ed_fabianjeremmyritxiel;

import java.awt.event.MouseAdapter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 * Cantidad por conector y tiempo para fabricar armas
 * @author fabia
 */
public class VentanaJugador extends javax.swing.JFrame {

    /**
     * Creates new form VentanaJugador
     */
    public VentanaJugador() {
        
        initComponents();
        //jp_TableroJugador.setLayout(null);
        //jp_TableroEnemigo.setLayout(null);
        jugador= new Jugador(this);
        generarTablero();
        initImages();
        setearLabels();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jp_TableroJugador = new javax.swing.JPanel();
        jp_TableroEnemigo = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txa_Mensaje = new javax.swing.JTextArea();
        txf_Mensaje = new javax.swing.JTextField();
        btn_Enviar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txa_Jugadas = new javax.swing.JTextArea();
        btn_Iniciar = new javax.swing.JButton();
        btn_PonerFuente = new javax.swing.JButton();
        btn_PonerMercado = new javax.swing.JButton();
        btn_PonerArmeria = new javax.swing.JButton();
        btn_PonerConector = new javax.swing.JButton();
        btn_PonerMina = new javax.swing.JButton();
        btn_PonerTemplo = new javax.swing.JButton();
        btn_Mercado = new javax.swing.JButton();
        btn_CanonBB = new javax.swing.JButton();
        btn_Canon = new javax.swing.JButton();
        btn_CanonM = new javax.swing.JButton();
        btn_Bomba = new javax.swing.JButton();
        btn_BarcoF = new javax.swing.JButton();
        btn_Escudo = new javax.swing.JButton();
        btn_TaboleroP1 = new javax.swing.JButton();
        btn_TableroP2 = new javax.swing.JButton();
        btn_TaberoP3 = new javax.swing.JButton();
        btn_TableroP4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lbl_CantConector = new javax.swing.JLabel();
        lbl_CantArmeria = new javax.swing.JLabel();
        lbl_CantMina = new javax.swing.JLabel();
        lbl_CantTemplo = new javax.swing.JLabel();
        lbl_CantFuente = new javax.swing.JLabel();
        lbl_CantMercado = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        lbl_CantEscudo = new javax.swing.JLabel();
        lbl_CantBarcoF = new javax.swing.JLabel();
        lbl_CantCanonBB = new javax.swing.JLabel();
        lbl_CantBomba = new javax.swing.JLabel();
        lbl_CantCanonM = new javax.swing.JLabel();
        lbl_CantCanon = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        lbl_CantKraken = new javax.swing.JLabel();
        btn_Kraken = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        lbl_CantHierro = new javax.swing.JLabel();
        lbl_CantPlata = new javax.swing.JLabel();
        btn_Horizontal = new javax.swing.JButton();
        btn_Vertical = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jp_TableroJugadorLayout = new javax.swing.GroupLayout(jp_TableroJugador);
        jp_TableroJugador.setLayout(jp_TableroJugadorLayout);
        jp_TableroJugadorLayout.setHorizontalGroup(
            jp_TableroJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 393, Short.MAX_VALUE)
        );
        jp_TableroJugadorLayout.setVerticalGroup(
            jp_TableroJugadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 391, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jp_TableroEnemigoLayout = new javax.swing.GroupLayout(jp_TableroEnemigo);
        jp_TableroEnemigo.setLayout(jp_TableroEnemigoLayout);
        jp_TableroEnemigoLayout.setHorizontalGroup(
            jp_TableroEnemigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 395, Short.MAX_VALUE)
        );
        jp_TableroEnemigoLayout.setVerticalGroup(
            jp_TableroEnemigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 391, Short.MAX_VALUE)
        );

        txa_Mensaje.setColumns(20);
        txa_Mensaje.setRows(5);
        jScrollPane1.setViewportView(txa_Mensaje);

        txf_Mensaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txf_MensajeActionPerformed(evt);
            }
        });

        btn_Enviar.setText("Enviar");
        btn_Enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_EnviarActionPerformed(evt);
            }
        });

        txa_Jugadas.setColumns(20);
        txa_Jugadas.setRows(5);
        jScrollPane2.setViewportView(txa_Jugadas);

        btn_Iniciar.setText("Iniciar");
        btn_Iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_IniciarActionPerformed(evt);
            }
        });

        btn_PonerFuente.setText("Fuente");
        btn_PonerFuente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_PonerFuenteActionPerformed(evt);
            }
        });

        btn_PonerMercado.setText("Mercado");
        btn_PonerMercado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_PonerMercadoActionPerformed(evt);
            }
        });

        btn_PonerArmeria.setText("Armería");
        btn_PonerArmeria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_PonerArmeriaActionPerformed(evt);
            }
        });

        btn_PonerConector.setText("Conector");
        btn_PonerConector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_PonerConectorActionPerformed(evt);
            }
        });

        btn_PonerMina.setText("Mina");
        btn_PonerMina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_PonerMinaActionPerformed(evt);
            }
        });

        btn_PonerTemplo.setText("Templo");
        btn_PonerTemplo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_PonerTemploActionPerformed(evt);
            }
        });

        btn_Mercado.setText("Acceder Mercado");

        btn_CanonBB.setText("Cañon BB");
        btn_CanonBB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_CanonBBActionPerformed(evt);
            }
        });

        btn_Canon.setText("Cañon");
        btn_Canon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_CanonActionPerformed(evt);
            }
        });

        btn_CanonM.setText("Cañon M");
        btn_CanonM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_CanonMActionPerformed(evt);
            }
        });

        btn_Bomba.setText("Bomba");
        btn_Bomba.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_BombaActionPerformed(evt);
            }
        });

        btn_BarcoF.setText("Barco F");
        btn_BarcoF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_BarcoFActionPerformed(evt);
            }
        });

        btn_Escudo.setText("Escudo");
        btn_Escudo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_EscudoActionPerformed(evt);
            }
        });

        btn_TaboleroP1.setText("P1");
        btn_TaboleroP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_TaboleroP1ActionPerformed(evt);
            }
        });

        btn_TableroP2.setText("P2");
        btn_TableroP2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_TableroP2ActionPerformed(evt);
            }
        });

        btn_TaberoP3.setText("P3");
        btn_TaberoP3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_TaberoP3ActionPerformed(evt);
            }
        });

        btn_TableroP4.setText("P4");
        btn_TableroP4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_TableroP4ActionPerformed(evt);
            }
        });

        jLabel1.setText("Inventario");

        jLabel2.setText("Fuentes");

        jLabel3.setText("Mercados");

        jLabel4.setText("Conectores");

        jLabel5.setText("Armerias");

        jLabel6.setText("Minas");

        jLabel7.setText("Templos");

        lbl_CantConector.setText("0");

        lbl_CantArmeria.setText("0");

        lbl_CantMina.setText("0");

        lbl_CantTemplo.setText("0");

        lbl_CantFuente.setText("0");

        lbl_CantMercado.setText("0");

        jLabel14.setText("Cañon");

        jLabel15.setText("Cañon M.");

        jLabel16.setText("Bomba");

        jLabel17.setText("Cañon B.B.");

        jLabel18.setText("Barco F.");

        jLabel19.setText("Escudos");

        lbl_CantEscudo.setText("0");

        lbl_CantBarcoF.setText("0");

        lbl_CantCanonBB.setText("0");

        lbl_CantBomba.setText("0");

        lbl_CantCanonM.setText("0");

        lbl_CantCanon.setText("0");

        jLabel26.setText("Krakens");

        lbl_CantKraken.setText("0");

        btn_Kraken.setText("Kraken");
        btn_Kraken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_KrakenActionPerformed(evt);
            }
        });

        jLabel28.setText("Plata ($)");

        jLabel29.setText("Hierro (Kg)");

        lbl_CantHierro.setText("0");

        lbl_CantPlata.setText("0");

        btn_Horizontal.setText("Horizontal");
        btn_Horizontal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_HorizontalActionPerformed(evt);
            }
        });

        btn_Vertical.setText("Vertical");
        btn_Vertical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_VerticalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txf_Mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Enviar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_Iniciar)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jp_TableroJugador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(btn_PonerMina)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn_PonerTemplo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btn_PonerFuente)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn_PonerMercado)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn_PonerConector)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn_PonerArmeria))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(btn_Mercado, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btn_Canon, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn_BarcoF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btn_CanonM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btn_Escudo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btn_Bomba, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btn_Kraken, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_CanonBB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE))
                            .addComponent(jp_TableroEnemigo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(67, 67, 67)
                                        .addComponent(jLabel1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel3)
                                                    .addComponent(jLabel2)
                                                    .addComponent(jLabel4)
                                                    .addComponent(jLabel5)
                                                    .addComponent(jLabel6)
                                                    .addComponent(jLabel7))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(lbl_CantFuente, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                                                    .addComponent(lbl_CantMercado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lbl_CantConector, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lbl_CantArmeria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lbl_CantMina, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lbl_CantTemplo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jLabel15)
                                                    .addComponent(jLabel14)
                                                    .addComponent(jLabel16)
                                                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel18)
                                                    .addComponent(jLabel19)
                                                    .addComponent(jLabel26)
                                                    .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lbl_CantHierro, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lbl_CantPlata, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lbl_CantKraken, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(lbl_CantCanon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(lbl_CantCanonM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(lbl_CantBomba, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(lbl_CantCanonBB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(lbl_CantBarcoF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(lbl_CantEscudo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btn_TaboleroP1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btn_TableroP2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btn_TaberoP3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btn_TableroP4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 12, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btn_Horizontal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btn_Vertical, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(70, 70, 70))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jp_TableroEnemigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jp_TableroJugador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btn_PonerFuente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btn_PonerMercado, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btn_PonerConector, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btn_PonerArmeria, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btn_PonerMina, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btn_PonerTemplo, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btn_Mercado, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btn_Canon, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn_CanonM, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn_Bomba, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn_CanonBB, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btn_BarcoF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btn_Escudo, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btn_Kraken, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl_CantFuente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_CantMercado)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_CantConector)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_CantArmeria)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_CantMina)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_CantTemplo)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel19))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl_CantCanon)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_CantCanonM)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_CantBomba)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_CantCanonBB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_CantBarcoF)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_CantEscudo)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel26)
                            .addComponent(lbl_CantKraken))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel28)
                            .addComponent(lbl_CantPlata))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel29)
                            .addComponent(lbl_CantHierro))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_TaberoP3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_TableroP4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_TaboleroP1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_TableroP2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(34, 34, 34)
                        .addComponent(btn_Horizontal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Vertical)
                        .addGap(71, 71, 71)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txf_Mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_Enviar)
                    .addComponent(btn_Iniciar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txf_MensajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txf_MensajeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txf_MensajeActionPerformed

    private void btn_EnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_EnviarActionPerformed
        try {
            // se toma lo escrito
            String mensaje = txf_Mensaje.getText();
            // se muestra en el text area
            mensaje=jugador.nomPlayer+">"+mensaje;
            mostrar(mensaje);
            // se limpia el textfield
            txf_Mensaje.setText("");
            // envia al server la opcion 4 para que le pase al enemigo
            // lo escrito
            jugador.salidaObject.writeInt(4);
            jugador.salidaObject.flush();
            // le envia el mensaje
            jugador.salidaObject.writeUTF(mensaje);
            jugador.salidaObject.flush();
            
        } catch (IOException ex) {

        }
    }//GEN-LAST:event_btn_EnviarActionPerformed

    private void btn_IniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_IniciarActionPerformed
        try {
            jugador.conexion();
            System.out.println("El número de jugador es:");
        } catch (IOException ex) {}
    }//GEN-LAST:event_btn_IniciarActionPerformed

    private void btn_PonerFuenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_PonerFuenteActionPerformed
        tipoEstructura=1;
    }//GEN-LAST:event_btn_PonerFuenteActionPerformed

    private void btn_PonerMercadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_PonerMercadoActionPerformed
        tipoEstructura=2;
    }//GEN-LAST:event_btn_PonerMercadoActionPerformed

    private void btn_PonerConectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_PonerConectorActionPerformed
        tipoEstructura=3;
    }//GEN-LAST:event_btn_PonerConectorActionPerformed

    private void btn_PonerArmeriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_PonerArmeriaActionPerformed
        tipoEstructura=4;
    }//GEN-LAST:event_btn_PonerArmeriaActionPerformed

    private void btn_PonerMinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_PonerMinaActionPerformed
        tipoEstructura=5;
    }//GEN-LAST:event_btn_PonerMinaActionPerformed

    private void btn_PonerTemploActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_PonerTemploActionPerformed
        tipoEstructura=6;
    }//GEN-LAST:event_btn_PonerTemploActionPerformed

    private void btn_HorizontalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_HorizontalActionPerformed
        horizontal=1;
    }//GEN-LAST:event_btn_HorizontalActionPerformed

    private void btn_VerticalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_VerticalActionPerformed
        horizontal=0;
    }//GEN-LAST:event_btn_VerticalActionPerformed

    private void btn_TaboleroP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_TaboleroP1ActionPerformed
        jugadorEnemigo=1;
        pintarTableroAtaque(1);
    }//GEN-LAST:event_btn_TaboleroP1ActionPerformed

    private void btn_TableroP2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_TableroP2ActionPerformed
        jugadorEnemigo=2;
        pintarTableroAtaque(2);
    }//GEN-LAST:event_btn_TableroP2ActionPerformed

    private void btn_TaberoP3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_TaberoP3ActionPerformed
        jugadorEnemigo=3;
        pintarTableroAtaque(3);
    }//GEN-LAST:event_btn_TaberoP3ActionPerformed

    private void btn_TableroP4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_TableroP4ActionPerformed
        jugadorEnemigo=4;
        pintarTableroAtaque(4
        );
    }//GEN-LAST:event_btn_TableroP4ActionPerformed

    private void btn_CanonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_CanonActionPerformed
        tipoAtaque=7;
    }//GEN-LAST:event_btn_CanonActionPerformed

    private void btn_CanonMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_CanonMActionPerformed
        tipoAtaque=8;
    }//GEN-LAST:event_btn_CanonMActionPerformed

    private void btn_BombaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_BombaActionPerformed
        tipoAtaque=9;
    }//GEN-LAST:event_btn_BombaActionPerformed

    private void btn_CanonBBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_CanonBBActionPerformed
        tipoAtaque=10;
    }//GEN-LAST:event_btn_CanonBBActionPerformed

    private void btn_BarcoFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_BarcoFActionPerformed
        tipoAtaque=11;
    }//GEN-LAST:event_btn_BarcoFActionPerformed

    private void btn_EscudoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_EscudoActionPerformed
        tipoAtaque=13;
    }//GEN-LAST:event_btn_EscudoActionPerformed

    private void btn_KrakenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_KrakenActionPerformed
        tipoAtaque=12;
    }//GEN-LAST:event_btn_KrakenActionPerformed
    
    Jugador jugador;
    //----------------------------------
    // cambiar este valor para dimensiones
    public static int DIMENSIONES = 20;
    // Tablero con objetos JButton
    JButton[][] tableroLabels = new JButton[DIMENSIONES][DIMENSIONES];
    JButton [][] tableroEnemigo = new JButton[DIMENSIONES][DIMENSIONES];
    // tablero logico, indica el status del boton, si disparado o no
    int[][] tableroLogico = new int[DIMENSIONES][DIMENSIONES];
    int[][] tableroLogicoEnemigo1 = new int[DIMENSIONES][DIMENSIONES];
    int[][] tableroLogicoEnemigo2 = new int[DIMENSIONES][DIMENSIONES];
    int[][] tableroLogicoEnemigo3 = new int[DIMENSIONES][DIMENSIONES];
    int[][] tableroLogicoEnemigo4 = new int[DIMENSIONES][DIMENSIONES];
    
    
    
    // crea imagen blanco
    ImageIcon iconoVacio = new ImageIcon("C:\\Users\\fabia\\OneDrive\\Escritorio\\imgGatico\\wcvacio.GIF");
    ImageIcon iconoEquiz = new ImageIcon("C:\\Users\\fabia\\OneDrive\\Escritorio\\imgGatico\\cequiz.GIF");
    ImageIcon iconoCirculo = new ImageIcon("C:\\Users\\fabia\\OneDrive\\Escritorio\\imgGatico\\ccirculo.GIF");
    ImageIcon iconoFuente= new ImageIcon("C:\\Users\\fabia\\OneDrive\\Escritorio\\imgPirata\\fuente.png");
    ImageIcon iconoMercado= new ImageIcon("C:\\Users\\fabia\\OneDrive\\Escritorio\\imgPirata\\mercado.png");
    ImageIcon iconoConector= new ImageIcon("C:\\Users\\fabia\\OneDrive\\Escritorio\\imgPirata\\conector.png");
    ImageIcon iconoArmeria= new ImageIcon("C:\\Users\\fabia\\OneDrive\\Escritorio\\imgPirata\\armeria.png");
    ImageIcon iconoMina= new ImageIcon("C:\\Users\\fabia\\OneDrive\\Escritorio\\imgPirata\\mina.png");
    ImageIcon iconoTemplo= new ImageIcon("C:\\Users\\fabia\\OneDrive\\Escritorio\\imgPirata\\templo.png");
    
    int tipoEstructura=0;
    
    int tipoAtaque=0;
    
    int horizontal=1;
    int turnoJugador=1;
    
    //numero de jugador 1 o 2
    
    int cantFuente=1;
    int cantMercado=1;
    int cantConector=0;
    int cantArmeria=0;
    int cantMina=0;
    int cantTemplo=0;
    int cantCanon=5;
    int cantCanonM=5;
    int cantBomba=5;
    int cantCanonBB=10;
    int cantBarcoF=10;
    int cantEscudo=0;
    int cantKraken=0;
    int cantPlata=4000;
    int cantHierro=0;
    
    int jugadorEnemigo=0;
    
    boolean puedoJugar=false;
    
    void initImages(){
        btn_PonerFuente.setIcon(iconoFuente);
        btn_PonerMercado.setIcon(iconoMercado);
        btn_PonerConector.setIcon(iconoConector);
        btn_PonerArmeria.setIcon(iconoArmeria);
        btn_PonerMina.setIcon(iconoMina);
        btn_PonerTemplo.setIcon(iconoTemplo);
  
    }
    
    void bloqueoBotones(){
        
    }
    
    void generarTablero()
    {
        for(int i=0;i<DIMENSIONES;i++)
        {
            for(int j=0;j<DIMENSIONES;j++)
            {
                // coloca imagen a todos vacio
                tableroLabels[i][j] = new JButton(iconoVacio);
                tableroEnemigo[i][j]= new JButton(iconoVacio);
                //añade al panel el boton;
                jp_TableroJugador.add(tableroLabels[i][j]);
                jp_TableroEnemigo.add(tableroEnemigo[i][j]);
                // coloca dimensiones y localidad
                tableroLabels[i][j].setBounds(19*i, 19*j, 22, 22);
                tableroEnemigo[i][j].setBounds(19*i, 19*j, 22, 22);
                // coloca el comand como i , j 
                tableroLabels[i][j].setActionCommand(i+","+j);//i+","+j
                tableroEnemigo[i][j].setActionCommand(i+","+j);//i+","+j
                
                //añade el listener al boton
                tableroLabels[i][j].addMouseListener(new MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    
                    switch (tipoEstructura) {
                        case 0:
                            //
                            break;
                        case 1:
                            clickSobreTableroFuente(evt);
                            break;
                        case 2:
                            clickSobreTableroMercado(evt);
                            break;
                        case 3:
                            clickSobreTableroConector(evt);
                            break;
                        case 4:
                            clickSobreTableroArmeria(evt); 
                            break;
                        case 5:
                            clickSobreTableroMina(evt); 
                            break;
                        case 6:
                            clickSobreTableroTemplo(evt);
                            break;    
                        default:
                            throw new AssertionError();
                    }
                    
                    
                }
                
                public void mouseEntered(java.awt.event.MouseEvent evt){
                    switch (tipoEstructura) {
                        case 0:
                            //
                            break;
                        case 1:
                            mouseSobreTableroFuente(evt);
                            break;
                        case 2:
                            mouseSobreTableroMercado(evt);
                            break;
                        case 3:
                            mouseSobreTableroConector(evt);
                            break;
                        case 4:
                            mouseSobreTableroArmeria(evt);
                            break;
                        case 5:
                            mouseSobreTableroMina(evt);
                            break;
                        case 6:
                            mouseSobreTableroTemplo(evt);
                            break;    
                        default:
                            throw new AssertionError();
                    }
                }
                public void mouseExited(java.awt.event.MouseEvent evt) {
                    switch (tipoEstructura) {
                        case 0:
                            //
                            break;
                        case 1:
                            borrarMouseSobreTableroFuente(evt);
                            break;
                        case 2:
                            borrarMouseSobreTableroMercado(evt);
                            break;
                        case 3:
                            borrarMouseSobreTableroConector(evt);
                            break;
                        case 4:
                            borrarMouseSobreTableroArmeria(evt);
                            break;
                        case 5:
                            borrarMouseSobreTableroMina(evt);
                            break;
                        case 6:
                            borrarMouseSobreTableroTemplo(evt);
                            break;    
                        default:
                            throw new AssertionError();
                    }
                    System.out.println("chao"); 
                }
                });
                tableroEnemigo[i][j].addMouseListener(new MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    
                    switch (tipoAtaque) {
                        case 0:
                            //
                            break;
                        case 7:
                            clickSobreTableroCanon(evt);
                            break;
                        case 8:
                            clickSobreTableroCanonM(evt);
                            break;
                        case 9:
                            clickSobreTableroBomba(evt);
                            break;
                        case 10:
                            clickSobreTableroCanonBB(evt);
                            break;
                        case 11:
                            clickSobreTableroBarcoFF(evt);
                            break;
                        case 12:
                            clickSobreTableroKraken(evt);
                            break;  
                        case 13:
                            clickSobreTableroEscudo(evt);
                            break;
                        default:
                            throw new AssertionError();
                    }
                    
                    
                }
                });
                // en logico indica estado en disponible
                tableroLogico[i][j]=0;
                tableroLogicoEnemigo1[i][j]=0;
                tableroLogicoEnemigo2[i][j]=0;
                tableroLogicoEnemigo3[i][j]=0;
                tableroLogicoEnemigo4[i][j]=0;
            }
        }
    }
    // reiniciar el juego es poner todo como en un inicio
    public void reiniciarJuego()
    {
        turnoJugador=1;
        for(int i=0;i<DIMENSIONES;i++)
        {
            for(int j=0;j<DIMENSIONES;j++)
            {
                tableroLabels[i][j].setIcon(iconoVacio);
                tableroLogico[i][j]=0;
            }
        }
    }
    // este metodo es la respuesta del cliente al clic del enemigo
    public void marcar(Coordenada cord)
    {
        
    }
    public void bomba(int col, int fila)
    {
        JOptionPane.showMessageDialog(this, "Generar bombas y enviarlas una " +
                "a una al enemigo ("+col+","+fila+")");
    }
    public void clickSobreTableroFuente(java.awt.event.MouseEvent evt)
    {
        // obtiene el boton 
        JButton botonTemp = (JButton)evt.getComponent();
        
        // obtiene el i,j de action command del boton
        String identificadorBoton = botonTemp.getActionCommand();
        
        // separa el string del action comand para obtener columnas
        int columna = 
          Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
        int fila = 
          Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
        
        if((tableroLogico[columna][fila]!=0)||(tableroLogico[columna+1][fila]!=0)||
                (tableroLogico[columna][fila+1]!=0)||(tableroLogico[columna+1][fila+1]!=0))
            return;
        if (cantFuente != 0)
        {
            try {
            tableroLabels[columna][fila].setIcon(iconoFuente);
            tableroLabels[columna+1][fila].setIcon(iconoFuente);
            tableroLabels[columna][fila+1].setIcon(iconoFuente);
            tableroLabels[columna+1][fila+1].setIcon(iconoFuente);
            tableroLogico[columna][fila]=tipoEstructura;
            tableroLogico[columna+1][fila]=tipoEstructura;
            tableroLogico[columna][fila+1]=tipoEstructura;
            tableroLogico[columna+1][fila+1]=tipoEstructura;
            cantFuente--;
            setearLabels();
            //AGREGAR A GRAFO                 
                    
            } catch (ArrayIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(this, "Se escogieron coordenadas fuera del rango del tablero", 
                            "Posiciones fuera de rango", JOptionPane.ERROR_MESSAGE);
            }
        }
        if(haGanado())
        {
            JOptionPane.showMessageDialog(null, "Ha ganado el jugador 1");
            reiniciarJuego();
        }      
    }
    public void clickSobreTableroMercado(java.awt.event.MouseEvent evt)
    {
        // obtiene el boton 
        JButton botonTemp = (JButton)evt.getComponent();
        
        // obtiene el i,j de action command del boton
        String identificadorBoton = botonTemp.getActionCommand();
        
        // separa el string del action comand para obtener columnas
        int columna = 
          Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
        int fila = 
          Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
       
        
        // si ya se disparo entonces nada
        if (horizontal==1){
           if((tableroLogico[columna][fila]!=0)||(tableroLogico[columna+1][fila]!=0))
                return; 
        }
        else{
            if((tableroLogico[columna][fila]!=0)||(tableroLogico[columna][fila+1]!=0))
                return;
        }
        
        
        // si es mi turno continua, si no return
//        if (numeroJugador != turnoJugador)
//            return;
        
        // como es turno del cliente marca el logico con su numero
        //tableroLogico[columna][fila]=turnoJugador;
        // si era el jugador 1 marca con x y cambia el turno a jugador 2
        if (cantMercado != 0)
        {
            try {
                if(horizontal==1){
                    tableroLabels[columna][fila].setIcon(iconoMercado);
                    tableroLogico[columna][fila]=tipoEstructura;
                    tableroLabels[columna+1][fila].setIcon(iconoMercado);
                    tableroLogico[columna+1][fila]=tipoEstructura;
                    //Agregar grafo
                }
                else{
                    tableroLabels[columna][fila].setIcon(iconoMercado);
                    tableroLogico[columna][fila]=tipoEstructura;
                    tableroLabels[columna][fila+1].setIcon(iconoMercado);
                    tableroLogico[columna][fila+1]=tipoEstructura;
                    //agregar grafo
                }
                cantMercado--;
                setearLabels();
                             
                    
            } catch (ArrayIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(this, "Se escogieron coordenadas fuera del rango del tablero", 
                            "Posiciones fuera de rango", JOptionPane.ERROR_MESSAGE);
            }
            turnoJugador=2;
        }
//        else
//        {
//            // si era jugador 3, marca circulo y turno jugador 1
//            tableroLabels[columna][fila].setIcon(iconoCirculo);
//            turnoJugador=1;
//        }
        // muestra el turno del jugador
        // jLabel1.setText("Turno del Jugador "+turnoJugador);
        
        //try {
            // como el cliente dio clic debe enviar al servidor las coordenadas
            // el servidor se las pasara al thread cliente para que este
            // las muestre (haga el marcar)
            // envia las coordenadas
            //jugador.salidaObject.writeInt(1);
            //jugador.salidaObject.writeInt(columna);
            //jugador.salidaObject.writeInt(fila);
//        } catch (IOException ex) {
//            
//        }
         
        // si gano el jugador 1 lo indica
        if(haGanado())
        {
            JOptionPane.showMessageDialog(null, "Ha ganado el jugador 1");
            reiniciarJuego();
        }      
    }
    public void clickSobreTableroConector(java.awt.event.MouseEvent evt)
    {
        // obtiene el boton 
        JButton botonTemp = (JButton)evt.getComponent();
        
        // obtiene el i,j de action command del boton
        String identificadorBoton = botonTemp.getActionCommand();
        
        // separa el string del action comand para obtener columnas
        int columna = 
          Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
        int fila = 
          Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
       
        
        // si ya se disparo entonces nada
       
        if(tableroLogico[columna][fila]!=0)
            return; 
        
        // si es mi turno continua, si no return
//        if (numeroJugador != turnoJugador)
//            return;
        
        // como es turno del cliente marca el logico con su numero
        //tableroLogico[columna][fila]=turnoJugador;
        // si era el jugador 1 marca con x y cambia el turno a jugador 2
        if (cantConector != 0)
        {
            try {
                tableroLabels[columna][fila].setIcon(iconoConector);
                tableroLogico[columna][fila]=tipoEstructura;
                cantConector--;
                setearLabels();
                             
                    
            } catch (ArrayIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(this, "Se escogieron coordenadas fuera del rango del tablero", 
                            "Posiciones fuera de rango", JOptionPane.ERROR_MESSAGE);
            }
            turnoJugador=2;
        }
//        else
//        {
//            // si era jugador 3, marca circulo y turno jugador 1
//            tableroLabels[columna][fila].setIcon(iconoCirculo);
//            turnoJugador=1;
//        }
        // muestra el turno del jugador
        // jLabel1.setText("Turno del Jugador "+turnoJugador);
        
        //try {
            // como el cliente dio clic debe enviar al servidor las coordenadas
            // el servidor se las pasara al thread cliente para que este
            // las muestre (haga el marcar)
            // envia las coordenadas
            //jugador.salidaObject.writeInt(1);
            //jugador.salidaObject.writeInt(columna);
            //jugador.salidaObject.writeInt(fila);
//        } catch (IOException ex) {
//            
//        }
         
        // si gano el jugador 1 lo indica
        if(haGanado())
        {
            JOptionPane.showMessageDialog(null, "Ha ganado el jugador 1");
            reiniciarJuego();
        }      
    }
    public void clickSobreTableroArmeria(java.awt.event.MouseEvent evt)
    {
        // obtiene el boton 
        JButton botonTemp = (JButton)evt.getComponent();
        
        // obtiene el i,j de action command del boton
        String identificadorBoton = botonTemp.getActionCommand();
        
        // separa el string del action comand para obtener columnas
        int columna = 
          Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
        int fila = 
          Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
       
        
        // si ya se disparo entonces nada
        if (horizontal==1){
           if((tableroLogico[columna][fila]!=0)||(tableroLogico[columna+1][fila]!=0))
                return; 
        }
        else{
            if((tableroLogico[columna][fila]!=0)||(tableroLogico[columna][fila+1]!=0))
                return;
        }
        
        
        // si es mi turno continua, si no return
//        if (numeroJugador != turnoJugador)
//            return;
        
        // como es turno del cliente marca el logico con su numero
        //tableroLogico[columna][fila]=turnoJugador;
        // si era el jugador 1 marca con x y cambia el turno a jugador 2
        if (cantArmeria != 0)
        {
            try {
                if(horizontal==1){
                    tableroLabels[columna][fila].setIcon(iconoArmeria);
                    tableroLogico[columna][fila]=tipoEstructura;
                    tableroLabels[columna+1][fila].setIcon(iconoArmeria);
                    tableroLogico[columna+1][fila]=tipoEstructura;
                }
                else{
                    tableroLabels[columna][fila].setIcon(iconoArmeria);
                    tableroLogico[columna][fila]=tipoEstructura;
                    tableroLabels[columna][fila+1].setIcon(iconoArmeria);
                    tableroLogico[columna][fila+1]=tipoEstructura;
                }
                cantArmeria--;
                setearLabels();
                             
                    
            } catch (ArrayIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(this, "Se escogieron coordenadas fuera del rango del tablero", 
                            "Posiciones fuera de rango", JOptionPane.ERROR_MESSAGE);
            }
            turnoJugador=2;
        }
//        else
//        {
//            // si era jugador 3, marca circulo y turno jugador 1
//            tableroLabels[columna][fila].setIcon(iconoCirculo);
//            turnoJugador=1;
//        }
        // muestra el turno del jugador
        // jLabel1.setText("Turno del Jugador "+turnoJugador);
        
        //try {
            // como el cliente dio clic debe enviar al servidor las coordenadas
            // el servidor se las pasara al thread cliente para que este
            // las muestre (haga el marcar)
            // envia las coordenadas
            //jugador.salidaObject.writeInt(1);
            //jugador.salidaObject.writeInt(columna);
            //jugador.salidaObject.writeInt(fila);
//        } catch (IOException ex) {
//            
//        }
         
        // si gano el jugador 1 lo indica
        if(haGanado())
        {
            JOptionPane.showMessageDialog(null, "Ha ganado el jugador 1");
            reiniciarJuego();
        }      
    }
    public void clickSobreTableroMina(java.awt.event.MouseEvent evt)
    {
        // obtiene el boton 
        JButton botonTemp = (JButton)evt.getComponent();
        
        // obtiene el i,j de action command del boton
        String identificadorBoton = botonTemp.getActionCommand();
        
        // separa el string del action comand para obtener columnas
        int columna = 
          Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
        int fila = 
          Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
       
        
        // si ya se disparo entonces nada
        if (horizontal==1){
           if((tableroLogico[columna][fila]!=0)||(tableroLogico[columna+1][fila]!=0))
                return; 
        }
        else{
            if((tableroLogico[columna][fila]!=0)||(tableroLogico[columna][fila+1]!=0))
                return;
        }
        
        
        // si es mi turno continua, si no return
//        if (numeroJugador != turnoJugador)
//            return;
        
        // como es turno del cliente marca el logico con su numero
        //tableroLogico[columna][fila]=turnoJugador;
        // si era el jugador 1 marca con x y cambia el turno a jugador 2
        if (cantMina != 0)
        {
            try {
                if(horizontal==1){
                    tableroLabels[columna][fila].setIcon(iconoMina);
                    tableroLogico[columna][fila]=tipoEstructura;
                    tableroLabels[columna+1][fila].setIcon(iconoMina);
                    tableroLogico[columna+1][fila]=tipoEstructura;
                }
                else{
                    tableroLabels[columna][fila].setIcon(iconoMina);
                    tableroLogico[columna][fila]=tipoEstructura;
                    tableroLabels[columna][fila+1].setIcon(iconoMina);
                    tableroLogico[columna][fila+1]=tipoEstructura;
                }
                cantMina--;
                setearLabels();             
                    
            } catch (ArrayIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(this, "Se escogieron coordenadas fuera del rango del tablero", 
                            "Posiciones fuera de rango", JOptionPane.ERROR_MESSAGE);
            }
            turnoJugador=2;
        }
//        else
//        {
//            // si era jugador 3, marca circulo y turno jugador 1
//            tableroLabels[columna][fila].setIcon(iconoCirculo);
//            turnoJugador=1;
//        }
        // muestra el turno del jugador
        // jLabel1.setText("Turno del Jugador "+turnoJugador);
        
        //try {
            // como el cliente dio clic debe enviar al servidor las coordenadas
            // el servidor se las pasara al thread cliente para que este
            // las muestre (haga el marcar)
            // envia las coordenadas
            //jugador.salidaObject.writeInt(1);
            //jugador.salidaObject.writeInt(columna);
            //jugador.salidaObject.writeInt(fila);
//        } catch (IOException ex) {
//            
//        }
         
        // si gano el jugador 1 lo indica
        if(haGanado())
        {
            JOptionPane.showMessageDialog(null, "Ha ganado el jugador 1");
            reiniciarJuego();
        }      
    }
    public void clickSobreTableroTemplo(java.awt.event.MouseEvent evt)
    {
        // obtiene el boton 
        JButton botonTemp = (JButton)evt.getComponent();
        
        // obtiene el i,j de action command del boton
        String identificadorBoton = botonTemp.getActionCommand();
        
        // separa el string del action comand para obtener columnas
        int columna = 
          Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
        int fila = 
          Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
       
        
        // si ya se disparo entonces nada
        if (horizontal==1){
           if((tableroLogico[columna][fila]!=0)||(tableroLogico[columna+1][fila]!=0))
                return; 
        }
        else{
            if((tableroLogico[columna][fila]!=0)||(tableroLogico[columna][fila+1]!=0))
                return;
        }
        
        
        // si es mi turno continua, si no return
//        if (numeroJugador != turnoJugador)
//            return;
        
        // como es turno del cliente marca el logico con su numero
        //tableroLogico[columna][fila]=turnoJugador;
        // si era el jugador 1 marca con x y cambia el turno a jugador 2
        if (cantTemplo != 0)
        {
            try {
                if(horizontal==1){
                    tableroLabels[columna][fila].setIcon(iconoTemplo);
                    tableroLogico[columna][fila]=tipoEstructura;
                    tableroLabels[columna+1][fila].setIcon(iconoTemplo);
                    tableroLogico[columna+1][fila]=tipoEstructura;
                }
                else{
                    tableroLabels[columna][fila].setIcon(iconoTemplo);
                    tableroLogico[columna][fila]=tipoEstructura;
                    tableroLabels[columna][fila+1].setIcon(iconoTemplo);
                    tableroLogico[columna][fila+1]=tipoEstructura;
                }
                cantTemplo--;
                setearLabels();            
                    
            } catch (ArrayIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(this, "Se escogieron coordenadas fuera del rango del tablero", 
                            "Posiciones fuera de rango", JOptionPane.ERROR_MESSAGE);
            }
            turnoJugador=2;
        }
//        else
//        {
//            // si era jugador 3, marca circulo y turno jugador 1
//            tableroLabels[columna][fila].setIcon(iconoCirculo);
//            turnoJugador=1;
//        }
        // muestra el turno del jugador
        // jLabel1.setText("Turno del Jugador "+turnoJugador);
        
        //try {
            // como el cliente dio clic debe enviar al servidor las coordenadas
            // el servidor se las pasara al thread cliente para que este
            // las muestre (haga el marcar)
            // envia las coordenadas
            //jugador.salidaObject.writeInt(1);
            //jugador.salidaObject.writeInt(columna);
            //jugador.salidaObject.writeInt(fila);
//        } catch (IOException ex) {
//            
//        }
         
        // si gano el jugador 1 lo indica
        if(haGanado())
        {
            JOptionPane.showMessageDialog(null, "Ha ganado el jugador 1");
            reiniciarJuego();
        }      
    }
    void mouseSobreTableroFuente(java.awt.event.MouseEvent evt){
        JButton botonTemp= (JButton)evt.getComponent();
        String identificadorBoton = botonTemp.getActionCommand();
        
        // separa el string del action comand para obtener columnas
        int columna = 
          Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
        int fila = 
          Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
        try {
            if(tableroLogico[columna][fila]==0)
                tableroLabels[columna][fila].setIcon(iconoFuente);
            if(tableroLogico[columna+1][fila]==0)
                tableroLabels[columna+1][fila].setIcon(iconoFuente);
            if(tableroLogico[columna][fila+1]==0)
                tableroLabels[columna][fila+1].setIcon(iconoFuente);
            if(tableroLogico[columna+1][fila+1]==0)
                tableroLabels[columna+1][fila+1].setIcon(iconoFuente);
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }
    void borrarMouseSobreTableroFuente(java.awt.event.MouseEvent evt){
        JButton botonTemp= (JButton)evt.getComponent();
        String identificadorBoton = botonTemp.getActionCommand();
        
        // separa el string del action comand para obtener columnas
        int columna = 
          Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
        int fila = 
          Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
        try {
            System.out.println(tableroLogico[columna][fila]+"");
//            if((tableroLogico[columna][fila]==0)&&(tableroLogico[columna+1][fila]==0)&&
//                    (tableroLogico[columna][fila+1]==0)&&(tableroLogico[columna+1][fila+1]==0)){
//                tableroLabels[columna][fila].setIcon(iconoVacio);
//                tableroLabels[columna+1][fila].setIcon(iconoVacio);
//                tableroLabels[columna][fila+1].setIcon(iconoVacio);
//                tableroLabels[columna+1][fila+1].setIcon(iconoVacio);
//            }
            if(tableroLogico[columna][fila]==0)
                tableroLabels[columna][fila].setIcon(iconoVacio);
            if(tableroLogico[columna+1][fila]==0)
                tableroLabels[columna+1][fila].setIcon(iconoVacio);
            if(tableroLogico[columna][fila+1]==0)
                tableroLabels[columna][fila+1].setIcon(iconoVacio);
            if(tableroLogico[columna+1][fila+1]==0)
                tableroLabels[columna+1][fila+1].setIcon(iconoVacio);
            
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }
    void mouseSobreTableroMercado(java.awt.event.MouseEvent evt){
        JButton botonTemp= (JButton)evt.getComponent();
        String identificadorBoton = botonTemp.getActionCommand();
        
        // separa el string del action comand para obtener columnas
        int columna = 
          Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
        int fila = 
          Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
        try {
            if (horizontal==1) {
                if(tableroLogico[columna][fila]==0)
                    tableroLabels[columna][fila].setIcon(iconoMercado);
                
                if(tableroLogico[columna+1][fila]==0)
                    tableroLabels[columna+1][fila].setIcon(iconoMercado);
            }
            else{
                if(tableroLogico[columna][fila]==0)
                    tableroLabels[columna][fila].setIcon(iconoMercado);
                if(tableroLogico[columna][fila+1]==0)
                    tableroLabels[columna][fila+1].setIcon(iconoMercado);
            }
         
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }
    void borrarMouseSobreTableroMercado(java.awt.event.MouseEvent evt){
        JButton botonTemp= (JButton)evt.getComponent();
        String identificadorBoton = botonTemp.getActionCommand();
        
        // separa el string del action comand para obtener columnas
        int columna = 
          Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
        int fila = 
          Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
        try {
            if (horizontal==1) {
                if(tableroLogico[columna][fila]==0)
                    tableroLabels[columna][fila].setIcon(iconoVacio);
                
                if(tableroLogico[columna+1][fila]==0)
                    tableroLabels[columna+1][fila].setIcon(iconoVacio);
            }
            else{
                if(tableroLogico[columna][fila]==0)
                    tableroLabels[columna][fila].setIcon(iconoVacio);
                if(tableroLogico[columna][fila+1]==0)
                    tableroLabels[columna][fila+1].setIcon(iconoVacio);
            }
         
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }
    void mouseSobreTableroConector(java.awt.event.MouseEvent evt){
        JButton botonTemp= (JButton)evt.getComponent();
        String identificadorBoton = botonTemp.getActionCommand();
        
        // separa el string del action comand para obtener columnas
        int columna = 
          Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
        int fila = 
          Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
        
        if(tableroLogico[columna][fila]==0)
                    tableroLabels[columna][fila].setIcon(iconoConector);

    }
    void borrarMouseSobreTableroConector(java.awt.event.MouseEvent evt){
        JButton botonTemp= (JButton)evt.getComponent();
        String identificadorBoton = botonTemp.getActionCommand();
        
        // separa el string del action comand para obtener columnas
        int columna = 
          Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
        int fila = 
          Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));

        if(tableroLogico[columna][fila]==0)
                    tableroLabels[columna][fila].setIcon(iconoVacio);   
    }
    void mouseSobreTableroArmeria(java.awt.event.MouseEvent evt){
        JButton botonTemp= (JButton)evt.getComponent();
        String identificadorBoton = botonTemp.getActionCommand();
        
        // separa el string del action comand para obtener columnas
        int columna = 
          Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
        int fila = 
          Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
        try {
            if (horizontal==1) {
                if(tableroLogico[columna][fila]==0)
                    tableroLabels[columna][fila].setIcon(iconoArmeria);
                
                if(tableroLogico[columna+1][fila]==0)
                    tableroLabels[columna+1][fila].setIcon(iconoArmeria);
            }
            else{
                if(tableroLogico[columna][fila]==0)
                    tableroLabels[columna][fila].setIcon(iconoArmeria);
                if(tableroLogico[columna][fila+1]==0)
                    tableroLabels[columna][fila+1].setIcon(iconoArmeria);
            }
         
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }
    void borrarMouseSobreTableroArmeria(java.awt.event.MouseEvent evt){
        JButton botonTemp= (JButton)evt.getComponent();
        String identificadorBoton = botonTemp.getActionCommand();
        
        // separa el string del action comand para obtener columnas
        int columna = 
          Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
        int fila = 
          Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
        try {
            if (horizontal==1) {
                if(tableroLogico[columna][fila]==0)
                    tableroLabels[columna][fila].setIcon(iconoVacio);
                
                if(tableroLogico[columna+1][fila]==0)
                    tableroLabels[columna+1][fila].setIcon(iconoVacio);
            }
            else{
                if(tableroLogico[columna][fila]==0)
                    tableroLabels[columna][fila].setIcon(iconoVacio);
                if(tableroLogico[columna][fila+1]==0)
                    tableroLabels[columna][fila+1].setIcon(iconoVacio);
            }
         
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }
    void mouseSobreTableroMina(java.awt.event.MouseEvent evt){
        JButton botonTemp= (JButton)evt.getComponent();
        String identificadorBoton = botonTemp.getActionCommand();
        
        // separa el string del action comand para obtener columnas
        int columna = 
          Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
        int fila = 
          Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
        try {
            if (horizontal==1) {
                if(tableroLogico[columna][fila]==0)
                    tableroLabels[columna][fila].setIcon(iconoMina);
                
                if(tableroLogico[columna+1][fila]==0)
                    tableroLabels[columna+1][fila].setIcon(iconoMina);
            }
            else{
                if(tableroLogico[columna][fila]==0)
                    tableroLabels[columna][fila].setIcon(iconoMina);
                if(tableroLogico[columna][fila+1]==0)
                    tableroLabels[columna][fila+1].setIcon(iconoMina);
            }
         
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }
    void borrarMouseSobreTableroMina(java.awt.event.MouseEvent evt){
        JButton botonTemp= (JButton)evt.getComponent();
        String identificadorBoton = botonTemp.getActionCommand();
        
        // separa el string del action comand para obtener columnas
        int columna = 
          Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
        int fila = 
          Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
        try {
            if (horizontal==1) {
                if(tableroLogico[columna][fila]==0)
                    tableroLabels[columna][fila].setIcon(iconoVacio);
                
                if(tableroLogico[columna+1][fila]==0)
                    tableroLabels[columna+1][fila].setIcon(iconoVacio);
            }
            else{
                if(tableroLogico[columna][fila]==0)
                    tableroLabels[columna][fila].setIcon(iconoVacio);
                if(tableroLogico[columna][fila+1]==0)
                    tableroLabels[columna][fila+1].setIcon(iconoVacio);
            }
         
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }
    void mouseSobreTableroTemplo(java.awt.event.MouseEvent evt){
        JButton botonTemp= (JButton)evt.getComponent();
        String identificadorBoton = botonTemp.getActionCommand();
        
        // separa el string del action comand para obtener columnas
        int columna = 
          Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
        int fila = 
          Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
        try {
            if (horizontal==1) {
                if(tableroLogico[columna][fila]==0)
                    tableroLabels[columna][fila].setIcon(iconoTemplo);
                
                if(tableroLogico[columna+1][fila]==0)
                    tableroLabels[columna+1][fila].setIcon(iconoTemplo);
            }
            else{
                if(tableroLogico[columna][fila]==0)
                    tableroLabels[columna][fila].setIcon(iconoTemplo);
                if(tableroLogico[columna][fila+1]==0)
                    tableroLabels[columna][fila+1].setIcon(iconoTemplo);
            }
         
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }
    void borrarMouseSobreTableroTemplo(java.awt.event.MouseEvent evt){
        JButton botonTemp= (JButton)evt.getComponent();
        String identificadorBoton = botonTemp.getActionCommand();
        
        // separa el string del action comand para obtener columnas
        int columna = 
          Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
        int fila = 
          Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
        try {
            if (horizontal==1) {
                if(tableroLogico[columna][fila]==0)
                    tableroLabels[columna][fila].setIcon(iconoVacio);
                
                if(tableroLogico[columna+1][fila]==0)
                    tableroLabels[columna+1][fila].setIcon(iconoVacio);
            }
            else{
                if(tableroLogico[columna][fila]==0)
                    tableroLabels[columna][fila].setIcon(iconoVacio);
                if(tableroLogico[columna][fila+1]==0)
                    tableroLabels[columna][fila+1].setIcon(iconoVacio);
            }
         
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }
    void clickSobreTableroCanon(java.awt.event.MouseEvent evt){
        try {
            if(cantCanon!=0){
                jugador.salidaObject.writeInt(tipoAtaque);
                System.out.println("TipoAtaque"+ tipoAtaque);
                jugador.salidaObject.flush();
                JButton botonTemp= (JButton) evt.getComponent();
                // obtiene el i,j de action command del boton
                String identificadorBoton = botonTemp.getActionCommand();
                // separa el string del action comand para obtener columnas
                int columna = 
                  Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
                int fila = 
                  Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
                Coordenada cordAtaque= new Coordenada (columna, fila);
                Posiciones posiAtaque = new Posiciones();
                posiAtaque.listaCoordenada.add(cordAtaque);
                jugador.salidaObject.writeInt(jugadorEnemigo);
                jugador.salidaObject.flush();
                jugador.salidaObject.writeObject(posiAtaque);
                jugador.salidaObject.flush();
                cantCanon--;
                setearLabels();
            }
            
        } catch (IOException ex) {
            System.out.println("ERROOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOR1");
            Logger.getLogger(VentanaJugador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    void clickSobreTableroCanonM(java.awt.event.MouseEvent evt){
        try {
            if(cantCanonM!=0){
                jugador.salidaObject.writeInt(tipoAtaque);
                System.out.println("TipoAtaque"+ tipoAtaque);
                jugador.salidaObject.flush();
                JButton botonTemp= (JButton) evt.getComponent();
                // obtiene el i,j de action command del boton
                String identificadorBoton = botonTemp.getActionCommand();
                // separa el string del action comand para obtener columnas
                int columna = 
                  Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
                int fila = 
                  Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
                Coordenada cordAtaque= new Coordenada (columna, fila);
                Posiciones posiAtaque = new Posiciones();
                posiAtaque.listaCoordenada.add(cordAtaque);
                jugador.salidaObject.writeInt(jugadorEnemigo);
                jugador.salidaObject.flush();
                jugador.salidaObject.writeObject(posiAtaque);
                jugador.salidaObject.flush();
            }
        } catch (IOException ex) {
            System.out.println("ERROOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOR1");
            Logger.getLogger(VentanaJugador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    void clickSobreTableroBomba(java.awt.event.MouseEvent evt){
        try {
            if(cantBomba!=0){
                if (horizontal==1){
                    jugador.salidaObject.writeInt(tipoAtaque);
                    System.out.println("TipoAtaque"+ tipoAtaque);
                    jugador.salidaObject.flush();
                    JButton botonTemp= (JButton) evt.getComponent();
                    // obtiene el i,j de action command del boton
                    String identificadorBoton = botonTemp.getActionCommand();
                    // separa el string del action comand para obtener columnas
                    int columna = 
                      Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
                    int fila = 
                      Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
                    Coordenada cordAtaque= new Coordenada (columna, fila);
                    Posiciones posiAtaque = new Posiciones();
                    Coordenada cordAtaqueOtro=new Coordenada (columna+1, fila);
                    posiAtaque.listaCoordenada.add(cordAtaque);
                    posiAtaque.listaCoordenada.add(cordAtaqueOtro);
                    jugador.salidaObject.writeInt(jugadorEnemigo);
                    jugador.salidaObject.flush();
                    jugador.salidaObject.writeObject(posiAtaque);
                    jugador.salidaObject.flush(); 
                }
                else{
                    jugador.salidaObject.writeInt(tipoAtaque);
                    System.out.println("TipoAtaque"+ tipoAtaque);
                    jugador.salidaObject.flush();
                    JButton botonTemp= (JButton) evt.getComponent();
                    // obtiene el i,j de action command del boton
                    String identificadorBoton = botonTemp.getActionCommand();
                    // separa el string del action comand para obtener columnas
                    int columna = 
                      Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
                    int fila = 
                      Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
                    Coordenada cordAtaque= new Coordenada (columna, fila);
                    Posiciones posiAtaque = new Posiciones();
                    Coordenada cordAtaqueOtro=new Coordenada (columna, fila+1);
                    posiAtaque.listaCoordenada.add(cordAtaque);
                    posiAtaque.listaCoordenada.add(cordAtaqueOtro);
                    jugador.salidaObject.writeInt(jugadorEnemigo);
                    jugador.salidaObject.flush();
                    jugador.salidaObject.writeObject(posiAtaque);
                    jugador.salidaObject.flush();
                }
            }
        } catch (IOException ex) {
            System.out.println("ERROOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOR1");
            Logger.getLogger(VentanaJugador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    void clickSobreTableroCanonBB(java.awt.event.MouseEvent evt){
        try {
            if(cantCanonBB!=0){
                jugador.salidaObject.writeInt(tipoAtaque);
                System.out.println("TipoAtaque"+ tipoAtaque);
                jugador.salidaObject.flush();
                JButton botonTemp= (JButton) evt.getComponent();
                // obtiene el i,j de action command del boton
                String identificadorBoton = botonTemp.getActionCommand();
                // separa el string del action comand para obtener columnas
                int columna = 
                  Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
                int fila = 
                  Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
                Coordenada cordAtaque= new Coordenada (columna, fila);
                Posiciones posiAtaque = new Posiciones();
                posiAtaque.listaCoordenada.add(cordAtaque);
                jugador.salidaObject.writeInt(jugadorEnemigo);
                jugador.salidaObject.flush();
                jugador.salidaObject.writeObject(posiAtaque);
                jugador.salidaObject.flush();
                cantCanonBB--;
                setearLabels();
            }
            
        } catch (IOException ex) {
            System.out.println("ERROOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOR1");
            Logger.getLogger(VentanaJugador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    void clickSobreTableroBarcoFF(java.awt.event.MouseEvent evt){
        try {
            jugador.salidaObject.writeInt(tipoAtaque);
            jugador.salidaObject.flush();
            puedoJugar=jugador.entradaObject.readBoolean();
            if (puedoJugar){
                JButton botonTemp= (JButton) evt.getComponent();
                // obtiene el i,j de action command del boton
                String identificadorBoton = botonTemp.getActionCommand();
                // separa el string del action comand para obtener columnas
                int columna = 
                  Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
                int fila = 
                  Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
                Coordenada cordAtaque= new Coordenada (fila, columna);
                Posiciones posiAtaque = new Posiciones();
                posiAtaque.listaCoordenada.add(cordAtaque);
                jugador.salidaObject.writeInt(jugadorEnemigo);
                jugador.salidaObject.flush();
                jugador.salidaObject.writeObject(posiAtaque);
                jugador.salidaObject.flush();
            }
            else{
                return;
            }
        } catch (IOException ex) {
            System.out.println("ERROOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOR1");
            Logger.getLogger(VentanaJugador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    void clickSobreTableroEscudo(java.awt.event.MouseEvent evt){
        try {
            jugador.salidaObject.writeInt(tipoAtaque);
            jugador.salidaObject.flush();
            puedoJugar=jugador.entradaObject.readBoolean();
            if (puedoJugar){
                JButton botonTemp= (JButton) evt.getComponent();
                // obtiene el i,j de action command del boton
                String identificadorBoton = botonTemp.getActionCommand();
                // separa el string del action comand para obtener columnas
                int columna = 
                  Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
                int fila = 
                  Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
                Coordenada cordAtaque= new Coordenada (fila, columna);
                Posiciones posiAtaque = new Posiciones();
                posiAtaque.listaCoordenada.add(cordAtaque);
                jugador.salidaObject.writeInt(jugadorEnemigo);
                jugador.salidaObject.flush();
                jugador.salidaObject.writeObject(posiAtaque);
                jugador.salidaObject.flush();
            }
            else{
                return;
            }
        } catch (IOException ex) {
            System.out.println("ERROOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOR1");
            Logger.getLogger(VentanaJugador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    void clickSobreTableroKraken(java.awt.event.MouseEvent evt){
        try {
            jugador.salidaObject.writeInt(tipoAtaque);
            jugador.salidaObject.flush();
            puedoJugar=jugador.entradaObject.readBoolean();
            if (puedoJugar){
                JButton botonTemp= (JButton) evt.getComponent();
                // obtiene el i,j de action command del boton
                String identificadorBoton = botonTemp.getActionCommand();
                // separa el string del action comand para obtener columnas
                int columna = 
                  Integer.parseInt(identificadorBoton.substring(0,identificadorBoton.indexOf(",")));
                int fila = 
                  Integer.parseInt(identificadorBoton.substring(1+identificadorBoton.indexOf(",")));
                Coordenada cordAtaque= new Coordenada (fila, columna);
                Posiciones posiAtaque = new Posiciones();
                posiAtaque.listaCoordenada.add(cordAtaque);
                jugador.salidaObject.writeInt(jugadorEnemigo);
                jugador.salidaObject.flush();
                jugador.salidaObject.writeObject(posiAtaque);
                jugador.salidaObject.flush();
            }
            else{
                return;
            }
        } catch (IOException ex) {
            System.out.println("ERROOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOR1");
            Logger.getLogger(VentanaJugador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    boolean haGanado()
    {
       return false;
    }                                      
    public void mostrar(String str){
        txa_Mensaje.append(str+"\n");
    }
    public void mostrarAtaque (String str){
        txa_Jugadas.append(str+"\n");
    }
    public void setCantFuente(){
        lbl_CantFuente.setText(cantFuente+"");
    }
    public void setCantMercado(){
        lbl_CantMercado.setText(cantMercado+"");
    }
    public void setCantConector(){
        lbl_CantConector.setText(cantConector+"");
    }
    public void setCantArmeria(){
        lbl_CantArmeria.setText(cantArmeria+"");   
    }
    public void setCantMina(){
        lbl_CantMina.setText(cantMina+"");
    }
    public void setCantTemplo(){
        lbl_CantTemplo.setText(cantTemplo+"");
    }
    public void setCantCanon(){
        lbl_CantCanon.setText(cantCanon+"");   
    }
    public void setCantCanonM(){
        lbl_CantCanonM.setText(cantCanonM+"");
    }
    public void setCantBomba(){
        lbl_CantBomba.setText(cantBomba+"");
    }
    public void setCantCanonBB(){
        lbl_CantCanonBB.setText(cantCanonBB+"");
    }
    public void setCantBarcoF(){
        lbl_CantBarcoF.setText(cantBarcoF+"");
    }
    public void setCantEscudo(){
        lbl_CantEscudo.setText(cantEscudo+"");
    }
    public void setCantKraken(){
        lbl_CantKraken.setText(cantKraken+"");
    }
    public void setCantPlata(){
        lbl_CantPlata.setText(cantPlata+"");
    }
    public void setCantHierro(){
        lbl_CantHierro.setText(cantHierro+"");
    }
    public void setearLabels(){
        setCantFuente();
        setCantMercado();
        setCantConector();
        setCantArmeria();
        setCantMina();
        setCantTemplo();
        setCantCanon();
        setCantCanonM();
        setCantBomba();
        setCantCanonBB();
        setCantBarcoF();
        setCantEscudo();
        setCantKraken();
        setCantPlata();
        setCantHierro();
        
  
    }
    public void pintarTableroAtaque(int numTablero){
        switch (numTablero) {
            case 1:
                for(int i=0;i<DIMENSIONES;i++)
                {
                    for(int j=0;j<DIMENSIONES;j++)
                    {
                    if(tableroLogicoEnemigo1[i][j]!=0){
                        if(tableroLogicoEnemigo1[i][j]==7){
                            tableroEnemigo[i][j].setIcon(iconoEquiz);
                        }
                        else{
                            tableroEnemigo[i][j].setIcon(iconoCirculo);
                        }
                    }
                    }
                }
                break;
            case 2:
                for(int i=0;i<DIMENSIONES;i++)
                {
                    for(int j=0;j<DIMENSIONES;j++)
                    {
                    if(tableroLogicoEnemigo2[i][j]!=0){
                        if(tableroLogicoEnemigo2[i][j]==7){
                            tableroEnemigo[i][j].setIcon(iconoEquiz);
                        }
                        else{
                            tableroEnemigo[i][j].setIcon(iconoCirculo);
                        }
                    }
                    }
                    
                }
                break;
            case 3:
                for(int i=0;i<DIMENSIONES;i++)
                {
                    for(int j=0;j<DIMENSIONES;j++)
                    {
                    if(tableroLogicoEnemigo3[i][j]!=0){
                        if(tableroLogicoEnemigo3[i][j]==7){
                            tableroEnemigo[i][j].setIcon(iconoEquiz);
                        }
                        else{
                            tableroEnemigo[i][j].setIcon(iconoCirculo);
                        }
                    }
                    }
                }    
                    
                break;
            case 4:
                for(int i=0;i<DIMENSIONES;i++)
                {
                    for(int j=0;j<DIMENSIONES;j++)
                    {
                    if(tableroLogicoEnemigo4[i][j]!=0){
                        if(tableroLogicoEnemigo4[i][j]==7){
                            tableroEnemigo[i][j].setIcon(iconoEquiz);
                        }
                        else{
                            tableroEnemigo[i][j].setIcon(iconoCirculo);
                        }
                    }
                    }
                }    
                break;
                
            default:
                throw new AssertionError();
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaJugador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaJugador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaJugador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaJugador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaJugador().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_BarcoF;
    private javax.swing.JButton btn_Bomba;
    private javax.swing.JButton btn_Canon;
    private javax.swing.JButton btn_CanonBB;
    private javax.swing.JButton btn_CanonM;
    private javax.swing.JButton btn_Enviar;
    private javax.swing.JButton btn_Escudo;
    private javax.swing.JButton btn_Horizontal;
    private javax.swing.JButton btn_Iniciar;
    private javax.swing.JButton btn_Kraken;
    private javax.swing.JButton btn_Mercado;
    private javax.swing.JButton btn_PonerArmeria;
    private javax.swing.JButton btn_PonerConector;
    private javax.swing.JButton btn_PonerFuente;
    private javax.swing.JButton btn_PonerMercado;
    private javax.swing.JButton btn_PonerMina;
    private javax.swing.JButton btn_PonerTemplo;
    private javax.swing.JButton btn_TaberoP3;
    private javax.swing.JButton btn_TableroP2;
    private javax.swing.JButton btn_TableroP4;
    private javax.swing.JButton btn_TaboleroP1;
    private javax.swing.JButton btn_Vertical;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel jp_TableroEnemigo;
    private javax.swing.JPanel jp_TableroJugador;
    private javax.swing.JLabel lbl_CantArmeria;
    private javax.swing.JLabel lbl_CantBarcoF;
    private javax.swing.JLabel lbl_CantBomba;
    private javax.swing.JLabel lbl_CantCanon;
    private javax.swing.JLabel lbl_CantCanonBB;
    private javax.swing.JLabel lbl_CantCanonM;
    private javax.swing.JLabel lbl_CantConector;
    private javax.swing.JLabel lbl_CantEscudo;
    private javax.swing.JLabel lbl_CantFuente;
    private javax.swing.JLabel lbl_CantHierro;
    private javax.swing.JLabel lbl_CantKraken;
    private javax.swing.JLabel lbl_CantMercado;
    private javax.swing.JLabel lbl_CantMina;
    private javax.swing.JLabel lbl_CantPlata;
    private javax.swing.JLabel lbl_CantTemplo;
    private javax.swing.JTextArea txa_Jugadas;
    private javax.swing.JTextArea txa_Mensaje;
    private javax.swing.JTextField txf_Mensaje;
    // End of variables declaration//GEN-END:variables
}
